//
// 
// 
// This file is part of glScript project.
//
//   glScript is free software: you can redistribute it and/or modify
//   it under the terms of the GNU Lesser General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   glScript is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public License
//   along with glScript. If not, see <http://www.gnu.org/licenses/>.
//
//   Copyright (c) 2012 Bal Bahadur Chettri
//
//   Author: Bal Bahadur Chettri (balu.chettri@gmail.com)
//
import "oaidl.idl";
import "ocidl.idl";

import "..\..\..\include\gls_sdk\glscript\gls_ext_lib.idl";
import "..\..\..\include\gls_sdk\glscript\gls_core.idl";

[uuid(B4631F0C-74AA-48f5-8749-63787FF1B610), version(1.0), helpstring("GLS GLU Extension LIB")]
library LIB_GLS_GLU
{
	importlib("stdole2.tlb");

	/* interfaces */
	interface _GLScriptExtLib;

	[object, uuid(D415FD12-03EA-4f57-B8AB-F0DE104A08D2), dual, oleautomation, hidden, nonextensible]
	interface _GLS_GLU_Lib : _GLScriptExtLib {

		// ver 0.1
		HRESULT gluNewQuadric ([out,retval]long *retVal);
		HRESULT gluDeleteQuadric ([in]long qobj);
		HRESULT gluQuadricNormals ([in]long quadObject, [in]unsigned int normals);
		HRESULT gluQuadricTexture ([in]long quadObject, [in]char textureCoords);
		HRESULT gluQuadricOrientation ([in]long quadObject, [in]unsigned int orientation);
		HRESULT gluQuadricDrawStyle ([in]long quadObject, [in]unsigned int drawStyle);
		HRESULT gluCylinder ([in]long qobj, [in]double baseRadius, [in]double topRadius,
								[in]double height, [in]int slices, [in]int stacks);
		HRESULT gluDisk ( [in]long qobj, [in]double innerRadius, [in]double outerRadius, 
							[in]int slices, [in]int loops);
		HRESULT gluPartialDisk ( [in]long qobj, [in]double innerRadius, [in]double outerRadius, 
								[in]int slices, [in]int loops, [in]double startAngle, 
								[in]double sweepAngle);
		HRESULT gluSphere ([in]long qobj, [in]double radius, [in]int slices, [in]int stacks);

		// ver 0.2
		/*GLUnurbs* APIENTRY gluNewNurbsRenderer (void);
		void APIENTRY gluDeleteNurbsRenderer (GLUnurbs *nobj);
		void APIENTRY gluNurbsProperty (GLUnurbs *nobj, GLenum property, GLfloat value);
		void APIENTRY gluBeginSurface (GLUnurbs *nobj);
		void APIENTRY gluNurbsSurface (GLUnurbs *nobj, GLint sknot_count, float *sknot, 
										GLint tknot_count, GLfloat *tknot, GLint s_stride, 
										GLint t_stride, GLfloat *ctlarray, GLint sorder, 
										GLint torder, GLenum type);
		void APIENTRY gluEndSurface (GLUnurbs *nobj);*/
		HRESULT gluNewNurbsRenderer ([out,retval] long *retVal);
		HRESULT gluDeleteNurbsRenderer ([in] long nobj);
		HRESULT gluNurbsProperty ([in]long nobj, [in]unsigned int property, [in]float value);
		HRESULT gluBeginSurface ([in]long nobj);
		HRESULT gluNurbsSurface ([in]long nobj, 
									[in]int sknot_count, [in] _GLScript_Array *sknot, 
									[in]int tknot_count, [in] _GLScript_Array *tknot, 
									[in]int s_stride, [in]int t_stride, 
									[in] _GLScript_Array *ctlarray, 
									[in]int sorder, [in]int torder, 
									[in]unsigned int type);
		HRESULT gluEndSurface ([in] long nobj);
	}/* interface _GLS_GLU_Lib */
}
